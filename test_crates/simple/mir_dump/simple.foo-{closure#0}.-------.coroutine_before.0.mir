// MIR for `foo::{closure#0}` 0 coroutine_before

fn foo::{closure#0}(_1: {async fn body of foo()}, _2: ResumeTy) -> i32
yields ()
 {
    debug _task_context => _2;
    let mut _0: i32;

    bb0: {
        _0 = std::hint::black_box::<i32>(const 5_i32) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}
