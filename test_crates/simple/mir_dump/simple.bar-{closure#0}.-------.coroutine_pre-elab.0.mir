// MIR for `bar::{closure#0}` 0 coroutine_pre-elab
/* coroutine_layout = CoroutineLayout {
    field_tys: {
        _0: CoroutineSavedTy {
            ty: i32,
            source_info: SourceInfo {
                span: src/main.rs:7:9: 7:10 (#0),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
        _1: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:9 ~ simple[9417]::foo::{closure#0}),
                [
                    (),
                    std::future::ResumeTy,
                    (),
                    i32,
                    CoroutineWitness(
                        DefId(0:9 ~ simple[9417]::foo::{closure#0}),
                        [],
                    ),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: src/main.rs:8:13: 8:24 (#9),
                scope: scope[1],
            },
            ignore_for_traits: false,
        },
    },
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
        Suspend0 (3): [_0, _1],
    },
    storage_conflicts: BitMatrix(2x2) {
        (_0, _0),
        (_0, _1),
        (_1, _0),
        (_1, _1),
    },
} */

fn bar::{closure#0}(_1: {async fn body of bar()}, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _26;
    let mut _0: std::task::Poll<i32>;
    let _3: i32;
    let mut _5: {async fn body of foo()};
    let mut _6: {async fn body of foo()};
    let mut _8: ();
    let _9: ();
    let mut _10: std::task::Poll<i32>;
    let mut _11: std::pin::Pin<&mut {async fn body of foo()}>;
    let mut _12: &mut {async fn body of foo()};
    let mut _13: &mut {async fn body of foo()};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: ();
    let mut _22: i32;
    let mut _23: i32;
    let mut _24: (i32, bool);
    let mut _25: i32;
    let mut _26: &mut std::task::Context<'_>;
    scope 1 {
        debug a => ((_1 as variant#3).0: i32);
        let _4: i32;
        let mut _7: {async fn body of foo()};
        scope 2 {
            debug b => _4;
        }
        scope 3 {
            debug __awaitee => ((_1 as variant#3).1: {async fn body of foo()});
            let _18: i32;
            scope 4 {
                debug result => _18;
            }
        }
    }

    bb0: {
        _26 = move _2;
        nop;
        ((_1 as variant#3).0: i32) = std::hint::black_box::<i32>(const 5_i32) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = foo() -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _5 = <{async fn body of foo()} as std::future::IntoFuture>::into_future(move _6) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        StorageDead(_6);
        PlaceMention(_5);
        nop;
        ((_1 as variant#3).1: {async fn body of foo()}) = move _5;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut ((_1 as variant#3).1: {async fn body of foo()});
        _12 = &mut (*_13);
        _11 = Pin::<&mut {async fn body of foo()}>::new_unchecked(move _12) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = copy _26;
        _15 = move _16;
        goto -> bb6;
    }

    bb6: {
        _14 = &mut (*_15);
        StorageDead(_16);
        _10 = <{async fn body of foo()} as futures::Future>::poll(move _11, move _14) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        PlaceMention(_10);
        _17 = discriminant(_10);
        switchInt(move _17) -> [0: bb10, 1: bb9, otherwise: bb8];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ();
        _0 = Poll::<i32>::Pending;
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_20);
        StorageDead(_21);
        discriminant(_1) = 3;
        return;
    }

    bb10: {
        StorageLive(_18);
        _18 = copy ((_10 as Ready).0: i32);
        _4 = copy _18;
        StorageDead(_18);
        StorageDead(_10);
        StorageDead(_9);
        drop(((_1 as variant#3).1: {async fn body of foo()})) -> [return: bb12, unwind: bb25];
    }

    bb11: {
        StorageDead(_21);
        _26 = move _20;
        StorageDead(_20);
        _8 = const ();
        goto -> bb4;
    }

    bb12: {
        nop;
        goto -> bb13;
    }

    bb13: {
        StorageDead(_5);
        StorageLive(_22);
        _22 = copy ((_1 as variant#3).0: i32);
        StorageLive(_23);
        _23 = copy _4;
        _24 = AddWithOverflow(copy _22, copy _23);
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, move _23) -> [success: bb14, unwind: bb20];
    }

    bb14: {
        _25 = move (_24.0: i32);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_4);
        nop;
        drop(_1) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _0 = Poll::<i32>::Ready(move _25);
        discriminant(_1) = 1;
        return;
    }

    bb16: {
        StorageDead(_21);
        StorageDead(_20);
        drop(((_1 as variant#3).1: {async fn body of foo()})) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        nop;
        goto -> bb18;
    }

    bb18: {
        StorageDead(_5);
        StorageDead(_4);
        nop;
        drop(_1) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        coroutine_drop;
    }

    bb20 (cleanup): {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb29;
    }

    bb21 (cleanup): {
        StorageDead(_16);
        goto -> bb22;
    }

    bb22 (cleanup): {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb24;
    }

    bb23 (cleanup): {
        StorageDead(_12);
        goto -> bb24;
    }

    bb24 (cleanup): {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        drop(((_1 as variant#3).1: {async fn body of foo()})) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        nop;
        goto -> bb28;
    }

    bb26 (cleanup): {
        goto -> bb27;
    }

    bb27 (cleanup): {
        StorageDead(_6);
        goto -> bb28;
    }

    bb28 (cleanup): {
        StorageDead(_5);
        goto -> bb29;
    }

    bb29 (cleanup): {
        StorageDead(_4);
        goto -> bb30;
    }

    bb30 (cleanup): {
        nop;
        drop(_1) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        nop;
        goto -> bb33;
    }

    bb33 (cleanup): {
        StorageDead(_5);
        StorageDead(_4);
        nop;
        drop(_1) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb34: {
        return;
    }

    bb35: {
        drop(_1) -> [return: bb34, unwind continue];
    }
}
