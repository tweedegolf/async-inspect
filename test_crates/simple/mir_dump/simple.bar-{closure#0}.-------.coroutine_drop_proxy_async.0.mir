// MIR for `bar::{closure#0}` 0 coroutine_drop_proxy_async

fn bar::{closure#0}(_1: {async fn body of bar()}, _2: &mut Context<'_>) -> Poll<()> {
    let mut _0: std::task::Poll<()>;
    scope 1 {
        scope 2 {
        }
        scope 3 {
            scope 4 {
            }
        }
    }

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Poll::<()>::Ready(const ());
        return;
    }
}
