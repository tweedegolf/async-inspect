// MIR for `foo::{closure#0}` 0 coroutine_resume
/* coroutine_layout = CoroutineLayout {
    field_tys: {},
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
    },
    storage_conflicts: BitMatrix(0x0) {},
} */

fn foo::{closure#0}(_1: Pin<&mut {async fn body of foo()}>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _4;
    let mut _0: std::task::Poll<i32>;
    let mut _3: i32;
    let mut _4: &mut std::task::Context<'_>;
    let mut _5: u32;

    bb0: {
        _5 = discriminant((*(_1.0: &mut {async fn body of foo()})));
        switchInt(move _5) -> [0: bb1, 1: bb9, 2: bb8, otherwise: bb10];
    }

    bb1: {
        _4 = move _2;
        _3 = std::hint::black_box::<i32>(const 5_i32) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        goto -> bb6;
    }

    bb3: {
        _0 = Poll::<i32>::Ready(move _3);
        discriminant((*(_1.0: &mut {async fn body of foo()}))) = 1;
        return;
    }

    bb4 (cleanup): {
        goto -> bb5;
    }

    bb5 (cleanup): {
        goto -> bb7;
    }

    bb6: {
        goto -> bb3;
    }

    bb7 (cleanup): {
        discriminant((*(_1.0: &mut {async fn body of foo()}))) = 2;
        resume;
    }

    bb8: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb8, unwind continue];
    }

    bb9: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb9, unwind continue];
    }

    bb10: {
        unreachable;
    }
}
