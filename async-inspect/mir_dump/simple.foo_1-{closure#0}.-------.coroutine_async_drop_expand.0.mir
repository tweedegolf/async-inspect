// MIR for `foo_1::{closure#0}` 0 coroutine_async_drop_expand

fn foo_1::{closure#0}(_1: {async fn body of foo_1()}, _2: &mut Context<'_>) -> Poll<i32>
yields ()
 {
    debug _task_context => _2;
    let mut _0: std::task::Poll<i32>;
    let _3: std::string::String;
    let mut _4: std::string::String;
    let mut _5: &str;
    let _6: &str;
    let mut _9: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _10: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _12: ();
    let _13: ();
    let mut _14: std::task::Poll<i32>;
    let mut _15: std::pin::Pin<&mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>>;
    let mut _16: &mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _17: &mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: &mut std::task::Context<'_>;
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: &mut std::task::Context<'_>;
    let mut _25: ();
    let mut _27: {async fn body of foo_3<i32>()};
    let mut _28: {async fn body of foo_3<i32>()};
    let _30: ();
    let mut _31: std::task::Poll<i32>;
    let mut _32: std::pin::Pin<&mut {async fn body of foo_3<i32>()}>;
    let mut _33: &mut {async fn body of foo_3<i32>()};
    let mut _34: &mut {async fn body of foo_3<i32>()};
    let mut _35: &mut std::task::Context<'_>;
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: &mut std::task::Context<'_>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: &mut std::task::Context<'_>;
    let mut _42: ();
    let mut _43: i32;
    let mut _44: i32;
    let mut _45: i32;
    let mut _46: (i32, bool);
    let mut _47: i32;
    let mut _48: (i32, bool);
    let mut _49: i32;
    scope 1 {
        debug test => _3;
        let _7: i32;
        scope 2 {
            debug a => _7;
            let _8: i32;
            let mut _11: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
            scope 3 {
                debug b => _8;
                let _26: i32;
                let mut _29: {async fn body of foo_3<i32>()};
                scope 6 {
                    debug c => _26;
                }
                scope 7 {
                    debug __awaitee => _29;
                    let _39: i32;
                    scope 8 {
                        debug result => _39;
                    }
                }
            }
            scope 4 {
                debug __awaitee => _11;
                let _22: i32;
                scope 5 {
                    debug result => _22;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Test";
        _5 = &(*_6);
        _4 = <str as ToOwned>::to_owned(move _5) -> [return: bb1, unwind: bb63];
    }

    bb1: {
        StorageDead(_5);
        _3 = std::hint::black_box::<String>(move _4) -> [return: bb2, unwind: bb62];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_6);
        StorageLive(_7);
        _7 = std::hint::black_box::<i32>(const 5_i32) -> [return: bb3, unwind: bb61];
    }

    bb3: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = foo_2() -> [return: bb4, unwind: bb58];
    }

    bb4: {
        _9 = <std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}> as std::future::IntoFuture>::into_future(move _10) -> [return: bb5, unwind: bb57];
    }

    bb5: {
        StorageDead(_10);
        PlaceMention(_9);
        StorageLive(_11);
        _11 = move _9;
        goto -> bb6;
    }

    bb6: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _11;
        _16 = &mut (*_17);
        _15 = Pin::<&mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>>::new_unchecked(move _16) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = copy _2;
        _19 = move _20;
        goto -> bb8;
    }

    bb8: {
        _18 = &mut (*_19);
        StorageDead(_20);
        _14 = <std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}> as futures::Future>::poll(move _15, move _18) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        PlaceMention(_14);
        _21 = discriminant(_14);
        switchInt(move _21) -> [0: bb12, 1: bb11, otherwise: bb10];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ();
        _24 = yield(move _25) -> [resume: bb13, drop: bb34];
    }

    bb12: {
        StorageLive(_22);
        _22 = copy ((_14 as Ready).0: i32);
        _8 = copy _22;
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_25);
        _2 = move _24;
        StorageDead(_24);
        _12 = const ();
        goto -> bb6;
    }

    bb14: {
        StorageDead(_11);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_9);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = foo_3::<i32>() -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _27 = <{async fn body of foo_3<i32>()} as std::future::IntoFuture>::into_future(move _28) -> [return: bb17, unwind: bb48];
    }

    bb17: {
        StorageDead(_28);
        PlaceMention(_27);
        StorageLive(_29);
        _29 = move _27;
        goto -> bb18;
    }

    bb18: {
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _29;
        _33 = &mut (*_34);
        _32 = Pin::<&mut {async fn body of foo_3<i32>()}>::new_unchecked(move _33) -> [return: bb19, unwind: bb45];
    }

    bb19: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = copy _2;
        _36 = move _37;
        goto -> bb20;
    }

    bb20: {
        _35 = &mut (*_36);
        StorageDead(_37);
        _31 = <{async fn body of foo_3<i32>()} as futures::Future>::poll(move _32, move _35) -> [return: bb21, unwind: bb44];
    }

    bb21: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        PlaceMention(_31);
        _38 = discriminant(_31);
        switchInt(move _38) -> [0: bb23, 1: bb22, otherwise: bb10];
    }

    bb22: {
        _30 = const ();
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ();
        _41 = yield(move _42) -> [resume: bb24, drop: bb31];
    }

    bb23: {
        StorageLive(_39);
        _39 = copy ((_31 as Ready).0: i32);
        _26 = copy _39;
        StorageDead(_39);
        StorageDead(_31);
        StorageDead(_30);
        drop(_29) -> [return: bb25, unwind: bb47];
    }

    bb24: {
        StorageDead(_42);
        _2 = move _41;
        StorageDead(_41);
        _12 = const ();
        goto -> bb18;
    }

    bb25: {
        StorageDead(_29);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_27);
        StorageLive(_43);
        StorageLive(_44);
        _44 = copy _7;
        StorageLive(_45);
        _45 = copy _8;
        _46 = AddWithOverflow(copy _44, copy _45);
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _44, move _45) -> [success: bb27, unwind: bb41];
    }

    bb27: {
        _43 = move (_46.0: i32);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_47);
        _47 = copy _26;
        _48 = AddWithOverflow(copy _43, copy _47);
        assert(!move (_48.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, move _47) -> [success: bb28, unwind: bb40];
    }

    bb28: {
        _49 = move (_48.0: i32);
        StorageDead(_47);
        StorageDead(_43);
        StorageDead(_26);
        StorageDead(_8);
        StorageDead(_7);
        drop(_3) -> [return: bb29, unwind: bb65];
    }

    bb29: {
        StorageDead(_3);
        drop(_1) -> [return: bb30, unwind: bb66];
    }

    bb30: {
        return;
    }

    bb31: {
        StorageDead(_42);
        StorageDead(_41);
        drop(_29) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        StorageDead(_29);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb37;
    }

    bb34: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_11);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_9);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_8);
        StorageDead(_7);
        drop(_3) -> [return: bb38, unwind: bb70];
    }

    bb38: {
        StorageDead(_3);
        drop(_1) -> [return: bb39, unwind: bb66];
    }

    bb39: {
        coroutine_drop;
    }

    bb40 (cleanup): {
        StorageDead(_47);
        goto -> bb42;
    }

    bb41 (cleanup): {
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb42;
    }

    bb42 (cleanup): {
        StorageDead(_43);
        goto -> bb51;
    }

    bb43 (cleanup): {
        StorageDead(_37);
        goto -> bb44;
    }

    bb44 (cleanup): {
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb46;
    }

    bb45 (cleanup): {
        StorageDead(_33);
        goto -> bb46;
    }

    bb46 (cleanup): {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        drop(_29) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        StorageDead(_29);
        goto -> bb50;
    }

    bb48 (cleanup): {
        goto -> bb49;
    }

    bb49 (cleanup): {
        StorageDead(_28);
        goto -> bb50;
    }

    bb50 (cleanup): {
        StorageDead(_27);
        goto -> bb51;
    }

    bb51 (cleanup): {
        StorageDead(_26);
        goto -> bb60;
    }

    bb52 (cleanup): {
        StorageDead(_20);
        goto -> bb53;
    }

    bb53 (cleanup): {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb55;
    }

    bb54 (cleanup): {
        StorageDead(_16);
        goto -> bb55;
    }

    bb55 (cleanup): {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb56;
    }

    bb56 (cleanup): {
        StorageDead(_11);
        goto -> bb59;
    }

    bb57 (cleanup): {
        goto -> bb58;
    }

    bb58 (cleanup): {
        StorageDead(_10);
        goto -> bb59;
    }

    bb59 (cleanup): {
        StorageDead(_9);
        goto -> bb60;
    }

    bb60 (cleanup): {
        StorageDead(_8);
        goto -> bb61;
    }

    bb61 (cleanup): {
        StorageDead(_7);
        drop(_3) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        goto -> bb64;
    }

    bb63 (cleanup): {
        StorageDead(_5);
        goto -> bb64;
    }

    bb64 (cleanup): {
        StorageDead(_4);
        StorageDead(_6);
        goto -> bb65;
    }

    bb65 (cleanup): {
        StorageDead(_3);
        drop(_1) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67 (cleanup): {
        StorageDead(_29);
        goto -> bb68;
    }

    bb68 (cleanup): {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb69;
    }

    bb69 (cleanup): {
        StorageDead(_8);
        StorageDead(_7);
        drop(_3) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        StorageDead(_3);
        drop(_1) -> [return: bb66, unwind terminate(cleanup)];
    }
}
