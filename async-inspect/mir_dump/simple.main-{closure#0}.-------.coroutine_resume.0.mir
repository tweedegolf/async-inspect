// MIR for `main::{closure#0}` 0 coroutine_resume
/* coroutine_layout = CoroutineLayout {
    field_tys: {
        _0: CoroutineSavedTy {
            ty: i32,
            source_info: SourceInfo {
                span: examples/simple.rs:19:13: 19:14 (#0),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
        _1: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                [
                    i32,
                    (),
                    std::future::ResumeTy,
                    (),
                    i32,
                    CoroutineWitness(
                        DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                        [
                            i32,
                        ],
                    ),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: examples/simple.rs:19:17: 19:37 (#10),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
        _2: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                [
                    i32,
                    (),
                    std::future::ResumeTy,
                    (),
                    i32,
                    CoroutineWitness(
                        DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                        [
                            i32,
                        ],
                    ),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: examples/simple.rs:20:17: 20:37 (#12),
                scope: scope[1],
            },
            ignore_for_traits: false,
        },
        _3: CoroutineSavedTy {
            ty: i32,
            source_info: SourceInfo {
                span: examples/simple.rs:21:13: 21:16 (#0),
                scope: scope[4],
            },
            ignore_for_traits: false,
        },
        _4: CoroutineSavedTy {
            ty: i32,
            source_info: SourceInfo {
                span: examples/simple.rs:23:13: 23:14 (#0),
                scope: scope[7],
            },
            ignore_for_traits: false,
        },
        _5: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                [
                    i32,
                    (),
                    std::future::ResumeTy,
                    (),
                    i32,
                    CoroutineWitness(
                        DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                        [
                            i32,
                        ],
                    ),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: examples/simple.rs:23:17: 23:37 (#14),
                scope: scope[7],
            },
            ignore_for_traits: false,
        },
        _6: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                [
                    i32,
                    (),
                    std::future::ResumeTy,
                    (),
                    i32,
                    CoroutineWitness(
                        DefId(0:14 ~ simple[8cbb]::foo_3::{closure#0}),
                        [
                            i32,
                        ],
                    ),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: examples/simple.rs:24:17: 24:37 (#16),
                scope: scope[8],
            },
            ignore_for_traits: false,
        },
    },
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
        Suspend0 (3): [_1],
        Suspend1 (4): [_0, _2],
        Suspend2 (5): [_3, _5],
        Suspend3 (6): [_3, _4, _6],
    },
    storage_conflicts: BitMatrix(7x7) {
        (_0, _0),
        (_0, _1),
        (_0, _2),
        (_0, _3),
        (_0, _4),
        (_0, _5),
        (_0, _6),
        (_1, _0),
        (_1, _1),
        (_2, _0),
        (_2, _2),
        (_3, _0),
        (_3, _3),
        (_3, _4),
        (_3, _5),
        (_3, _6),
        (_4, _0),
        (_4, _3),
        (_4, _4),
        (_4, _5),
        (_4, _6),
        (_5, _0),
        (_5, _3),
        (_5, _4),
        (_5, _5),
        (_6, _0),
        (_6, _3),
        (_6, _4),
        (_6, _6),
    },
} */

fn main::{closure#0}(_1: Pin<&mut {async block@examples/simple.rs:18:15: 18:25}>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _83;
    let mut _0: std::task::Poll<i32>;
    let _3: i32;
    let mut _4: {async fn body of foo_3<i32>()};
    let mut _5: {async fn body of foo_3<i32>()};
    let mut _6: {async fn body of foo_3<i32>()};
    let mut _7: ();
    let _8: ();
    let mut _9: std::task::Poll<i32>;
    let mut _10: std::pin::Pin<&mut {async fn body of foo_3<i32>()}>;
    let mut _11: &mut {async fn body of foo_3<i32>()};
    let mut _12: &mut {async fn body of foo_3<i32>()};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: &mut std::task::Context<'_>;
    let mut _20: ();
    let mut _22: {async fn body of foo_3<i32>()};
    let mut _23: {async fn body of foo_3<i32>()};
    let _25: ();
    let mut _26: std::task::Poll<i32>;
    let mut _27: std::pin::Pin<&mut {async fn body of foo_3<i32>()}>;
    let mut _28: &mut {async fn body of foo_3<i32>()};
    let mut _29: &mut {async fn body of foo_3<i32>()};
    let mut _30: &mut std::task::Context<'_>;
    let mut _31: &mut std::task::Context<'_>;
    let mut _32: &mut std::task::Context<'_>;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: ();
    let mut _39: i32;
    let mut _40: i32;
    let mut _41: (i32, bool);
    let mut _43: {async fn body of foo_3<i32>()};
    let mut _44: {async fn body of foo_3<i32>()};
    let _46: ();
    let mut _47: std::task::Poll<i32>;
    let mut _48: std::pin::Pin<&mut {async fn body of foo_3<i32>()}>;
    let mut _49: &mut {async fn body of foo_3<i32>()};
    let mut _50: &mut {async fn body of foo_3<i32>()};
    let mut _51: &mut std::task::Context<'_>;
    let mut _52: &mut std::task::Context<'_>;
    let mut _53: &mut std::task::Context<'_>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: &mut std::task::Context<'_>;
    let mut _58: ();
    let mut _60: {async fn body of foo_3<i32>()};
    let mut _61: {async fn body of foo_3<i32>()};
    let _63: ();
    let mut _64: std::task::Poll<i32>;
    let mut _65: std::pin::Pin<&mut {async fn body of foo_3<i32>()}>;
    let mut _66: &mut {async fn body of foo_3<i32>()};
    let mut _67: &mut {async fn body of foo_3<i32>()};
    let mut _68: &mut std::task::Context<'_>;
    let mut _69: &mut std::task::Context<'_>;
    let mut _70: &mut std::task::Context<'_>;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: &mut std::task::Context<'_>;
    let mut _75: ();
    let mut _76: i32;
    let mut _77: i32;
    let mut _78: i32;
    let mut _79: (i32, bool);
    let mut _80: i32;
    let mut _81: (i32, bool);
    let mut _82: i32;
    let mut _83: &mut std::task::Context<'_>;
    let mut _84: u32;
    scope 1 {
        debug b => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).0: i32);
        let _21: i32;
        let mut _24: {async fn body of foo_3<i32>()};
        scope 4 {
            debug c => _21;
            let _38: i32;
            scope 7 {
                debug mid => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).0: i32);
                let _42: i32;
                let mut _45: {async fn body of foo_3<i32>()};
                scope 8 {
                    debug d => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).1: i32);
                    let _59: i32;
                    let mut _62: {async fn body of foo_3<i32>()};
                    scope 11 {
                        debug e => _59;
                    }
                    scope 12 {
                        debug __awaitee => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).2: {async fn body of foo_3<i32>()});
                        let _72: i32;
                        scope 13 {
                            debug result => _72;
                        }
                    }
                }
                scope 9 {
                    debug __awaitee => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#5).1: {async fn body of foo_3<i32>()});
                    let _55: i32;
                    scope 10 {
                        debug result => _55;
                    }
                }
            }
        }
        scope 5 {
            debug __awaitee => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).1: {async fn body of foo_3<i32>()});
            let _34: i32;
            scope 6 {
                debug result => _34;
            }
        }
    }
    scope 2 {
        debug __awaitee => (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#3).0: {async fn body of foo_3<i32>()});
        let _17: i32;
        scope 3 {
            debug result => _17;
        }
    }

    bb0: {
        _84 = discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})));
        switchInt(move _84) -> [0: bb1, 1: bb96, 2: bb95, 3: bb91, 4: bb92, 5: bb93, 6: bb94, otherwise: bb8];
    }

    bb1: {
        _83 = move _2;
        nop;
        StorageLive(_4);
        StorageLive(_5);
        _5 = foo_3::<i32>() -> [return: bb2, unwind: bb85];
    }

    bb2: {
        _4 = <{async fn body of foo_3<i32>()} as std::future::IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb84];
    }

    bb3: {
        StorageDead(_5);
        PlaceMention(_4);
        nop;
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#3).0: {async fn body of foo_3<i32>()}) = move _4;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#3).0: {async fn body of foo_3<i32>()});
        _11 = &mut (*_12);
        _10 = Pin::<&mut {async fn body of foo_3<i32>()}>::new_unchecked(move _11) -> [return: bb5, unwind: bb81];
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = copy _83;
        _14 = move _15;
        goto -> bb6;
    }

    bb6: {
        _13 = &mut (*_14);
        StorageDead(_15);
        _9 = <{async fn body of foo_3<i32>()} as futures::Future>::poll(move _10, move _13) -> [return: bb7, unwind: bb80];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        PlaceMention(_9);
        _16 = discriminant(_9);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb8];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _8 = const ();
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ();
        _0 = Poll::<i32>::Pending;
        StorageDead(_4);
        StorageDead(_19);
        StorageDead(_20);
        discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25}))) = 3;
        return;
    }

    bb10: {
        StorageLive(_17);
        _17 = copy ((_9 as Ready).0: i32);
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).0: i32) = copy _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageDead(_8);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#3).0: {async fn body of foo_3<i32>()})) -> [return: bb12, unwind: bb83];
    }

    bb11: {
        StorageDead(_20);
        _83 = move _19;
        StorageDead(_19);
        _7 = const ();
        goto -> bb4;
    }

    bb12: {
        nop;
        goto -> bb13;
    }

    bb13: {
        StorageDead(_4);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = foo_3::<i32>() -> [return: bb14, unwind: bb77];
    }

    bb14: {
        _22 = <{async fn body of foo_3<i32>()} as std::future::IntoFuture>::into_future(move _23) -> [return: bb15, unwind: bb76];
    }

    bb15: {
        StorageDead(_23);
        PlaceMention(_22);
        nop;
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).1: {async fn body of foo_3<i32>()}) = move _22;
        goto -> bb16;
    }

    bb16: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).1: {async fn body of foo_3<i32>()});
        _28 = &mut (*_29);
        _27 = Pin::<&mut {async fn body of foo_3<i32>()}>::new_unchecked(move _28) -> [return: bb17, unwind: bb73];
    }

    bb17: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = copy _83;
        _31 = move _32;
        goto -> bb18;
    }

    bb18: {
        _30 = &mut (*_31);
        StorageDead(_32);
        _26 = <{async fn body of foo_3<i32>()} as futures::Future>::poll(move _27, move _30) -> [return: bb19, unwind: bb72];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        PlaceMention(_26);
        _33 = discriminant(_26);
        switchInt(move _33) -> [0: bb21, 1: bb20, otherwise: bb8];
    }

    bb20: {
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_36);
        StorageLive(_37);
        _37 = ();
        _0 = Poll::<i32>::Pending;
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_36);
        StorageDead(_37);
        discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25}))) = 4;
        return;
    }

    bb21: {
        StorageLive(_34);
        _34 = copy ((_26 as Ready).0: i32);
        _21 = copy _34;
        StorageDead(_34);
        StorageDead(_26);
        StorageDead(_25);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).1: {async fn body of foo_3<i32>()})) -> [return: bb23, unwind: bb75];
    }

    bb22: {
        StorageDead(_37);
        _83 = move _36;
        StorageDead(_36);
        _7 = const ();
        goto -> bb16;
    }

    bb23: {
        nop;
        goto -> bb24;
    }

    bb24: {
        StorageDead(_22);
        nop;
        StorageLive(_39);
        _39 = copy (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).0: i32);
        StorageLive(_40);
        _40 = copy _21;
        _41 = AddWithOverflow(copy _39, copy _40);
        assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _39, move _40) -> [success: bb25, unwind: bb70];
    }

    bb25: {
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).0: i32) = move (_41.0: i32);
        StorageDead(_40);
        StorageDead(_39);
        nop;
        StorageLive(_43);
        StorageLive(_44);
        _44 = foo_3::<i32>() -> [return: bb26, unwind: bb67];
    }

    bb26: {
        _43 = <{async fn body of foo_3<i32>()} as std::future::IntoFuture>::into_future(move _44) -> [return: bb27, unwind: bb66];
    }

    bb27: {
        StorageDead(_44);
        PlaceMention(_43);
        nop;
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#5).1: {async fn body of foo_3<i32>()}) = move _43;
        goto -> bb28;
    }

    bb28: {
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#5).1: {async fn body of foo_3<i32>()});
        _49 = &mut (*_50);
        _48 = Pin::<&mut {async fn body of foo_3<i32>()}>::new_unchecked(move _49) -> [return: bb29, unwind: bb63];
    }

    bb29: {
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = copy _83;
        _52 = move _53;
        goto -> bb30;
    }

    bb30: {
        _51 = &mut (*_52);
        StorageDead(_53);
        _47 = <{async fn body of foo_3<i32>()} as futures::Future>::poll(move _48, move _51) -> [return: bb31, unwind: bb62];
    }

    bb31: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        PlaceMention(_47);
        _54 = discriminant(_47);
        switchInt(move _54) -> [0: bb33, 1: bb32, otherwise: bb8];
    }

    bb32: {
        _46 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_57);
        StorageLive(_58);
        _58 = ();
        _0 = Poll::<i32>::Pending;
        StorageDead(_21);
        StorageDead(_43);
        StorageDead(_57);
        StorageDead(_58);
        discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25}))) = 5;
        return;
    }

    bb33: {
        StorageLive(_55);
        _55 = copy ((_47 as Ready).0: i32);
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).1: i32) = copy _55;
        StorageDead(_55);
        StorageDead(_47);
        StorageDead(_46);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#5).1: {async fn body of foo_3<i32>()})) -> [return: bb35, unwind: bb65];
    }

    bb34: {
        StorageDead(_58);
        _83 = move _57;
        StorageDead(_57);
        _7 = const ();
        goto -> bb28;
    }

    bb35: {
        nop;
        goto -> bb36;
    }

    bb36: {
        StorageDead(_43);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = foo_3::<i32>() -> [return: bb37, unwind: bb59];
    }

    bb37: {
        _60 = <{async fn body of foo_3<i32>()} as std::future::IntoFuture>::into_future(move _61) -> [return: bb38, unwind: bb58];
    }

    bb38: {
        StorageDead(_61);
        PlaceMention(_60);
        nop;
        (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).2: {async fn body of foo_3<i32>()}) = move _60;
        goto -> bb39;
    }

    bb39: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &mut (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).2: {async fn body of foo_3<i32>()});
        _66 = &mut (*_67);
        _65 = Pin::<&mut {async fn body of foo_3<i32>()}>::new_unchecked(move _66) -> [return: bb40, unwind: bb55];
    }

    bb40: {
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = copy _83;
        _69 = move _70;
        goto -> bb41;
    }

    bb41: {
        _68 = &mut (*_69);
        StorageDead(_70);
        _64 = <{async fn body of foo_3<i32>()} as futures::Future>::poll(move _65, move _68) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        PlaceMention(_64);
        _71 = discriminant(_64);
        switchInt(move _71) -> [0: bb44, 1: bb43, otherwise: bb8];
    }

    bb43: {
        _63 = const ();
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_74);
        StorageLive(_75);
        _75 = ();
        _0 = Poll::<i32>::Pending;
        StorageDead(_21);
        StorageDead(_59);
        StorageDead(_60);
        StorageDead(_74);
        StorageDead(_75);
        discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25}))) = 6;
        return;
    }

    bb44: {
        StorageLive(_72);
        _72 = copy ((_64 as Ready).0: i32);
        _59 = copy _72;
        StorageDead(_72);
        StorageDead(_64);
        StorageDead(_63);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).2: {async fn body of foo_3<i32>()})) -> [return: bb46, unwind: bb57];
    }

    bb45: {
        StorageDead(_75);
        _83 = move _74;
        StorageDead(_74);
        _7 = const ();
        goto -> bb39;
    }

    bb46: {
        nop;
        goto -> bb47;
    }

    bb47: {
        StorageDead(_60);
        StorageLive(_76);
        StorageLive(_77);
        _77 = copy (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).0: i32);
        StorageLive(_78);
        _78 = copy (((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).1: i32);
        _79 = AddWithOverflow(copy _77, copy _78);
        assert(!move (_79.1: bool), "attempt to compute `{} + {}`, which would overflow", move _77, move _78) -> [success: bb48, unwind: bb52];
    }

    bb48: {
        _76 = move (_79.0: i32);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_80);
        _80 = copy _59;
        _81 = AddWithOverflow(copy _76, copy _80);
        assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _76, move _80) -> [success: bb49, unwind: bb51];
    }

    bb49: {
        _82 = move (_81.0: i32);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_59);
        nop;
        nop;
        StorageDead(_21);
        nop;
        goto -> bb89;
    }

    bb50: {
        _0 = Poll::<i32>::Ready(move _82);
        discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25}))) = 1;
        return;
    }

    bb51 (cleanup): {
        StorageDead(_80);
        goto -> bb53;
    }

    bb52 (cleanup): {
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb53;
    }

    bb53 (cleanup): {
        StorageDead(_76);
        goto -> bb61;
    }

    bb54 (cleanup): {
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb56;
    }

    bb55 (cleanup): {
        StorageDead(_66);
        goto -> bb56;
    }

    bb56 (cleanup): {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#6).2: {async fn body of foo_3<i32>()})) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        nop;
        goto -> bb60;
    }

    bb58 (cleanup): {
        goto -> bb59;
    }

    bb59 (cleanup): {
        StorageDead(_61);
        goto -> bb60;
    }

    bb60 (cleanup): {
        StorageDead(_60);
        goto -> bb61;
    }

    bb61 (cleanup): {
        StorageDead(_59);
        goto -> bb69;
    }

    bb62 (cleanup): {
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb64;
    }

    bb63 (cleanup): {
        StorageDead(_49);
        goto -> bb64;
    }

    bb64 (cleanup): {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#5).1: {async fn body of foo_3<i32>()})) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        nop;
        goto -> bb68;
    }

    bb66 (cleanup): {
        goto -> bb67;
    }

    bb67 (cleanup): {
        StorageDead(_44);
        goto -> bb68;
    }

    bb68 (cleanup): {
        StorageDead(_43);
        goto -> bb69;
    }

    bb69 (cleanup): {
        nop;
        goto -> bb71;
    }

    bb70 (cleanup): {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb71;
    }

    bb71 (cleanup): {
        nop;
        goto -> bb79;
    }

    bb72 (cleanup): {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb74;
    }

    bb73 (cleanup): {
        StorageDead(_28);
        goto -> bb74;
    }

    bb74 (cleanup): {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#4).1: {async fn body of foo_3<i32>()})) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        nop;
        goto -> bb78;
    }

    bb76 (cleanup): {
        goto -> bb77;
    }

    bb77 (cleanup): {
        StorageDead(_23);
        goto -> bb78;
    }

    bb78 (cleanup): {
        StorageDead(_22);
        goto -> bb79;
    }

    bb79 (cleanup): {
        StorageDead(_21);
        goto -> bb87;
    }

    bb80 (cleanup): {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb82;
    }

    bb81 (cleanup): {
        StorageDead(_11);
        goto -> bb82;
    }

    bb82 (cleanup): {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        drop((((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25})) as variant#3).0: {async fn body of foo_3<i32>()})) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        nop;
        goto -> bb86;
    }

    bb84 (cleanup): {
        goto -> bb85;
    }

    bb85 (cleanup): {
        StorageDead(_5);
        goto -> bb86;
    }

    bb86 (cleanup): {
        StorageDead(_4);
        goto -> bb87;
    }

    bb87 (cleanup): {
        nop;
        goto -> bb88;
    }

    bb88 (cleanup): {
        goto -> bb90;
    }

    bb89: {
        goto -> bb50;
    }

    bb90 (cleanup): {
        discriminant((*(_1.0: &mut {async block@examples/simple.rs:18:15: 18:25}))) = 2;
        resume;
    }

    bb91: {
        StorageLive(_4);
        StorageLive(_19);
        StorageLive(_20);
        _19 = move _2;
        goto -> bb11;
    }

    bb92: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_36);
        StorageLive(_37);
        _36 = move _2;
        goto -> bb22;
    }

    bb93: {
        StorageLive(_21);
        StorageLive(_43);
        StorageLive(_57);
        StorageLive(_58);
        _57 = move _2;
        goto -> bb34;
    }

    bb94: {
        StorageLive(_21);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_74);
        StorageLive(_75);
        _74 = move _2;
        goto -> bb45;
    }

    bb95: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb95, unwind continue];
    }

    bb96: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb96, unwind continue];
    }
}
