// MIR for `foo_3::{closure#0}` 0 coroutine_before

fn foo_3::{closure#0}(_1: {async fn body of foo_3<T>()}, _2: ResumeTy) -> T
yields ()
 {
    debug _task_context => _2;
    let mut _0: T;
    let mut _3: T;

    bb0: {
        StorageLive(_3);
        _3 = <T as Default>::default() -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _0 = std::hint::black_box::<T>(move _3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        StorageDead(_3);
        drop(_1) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        goto -> bb5;
    }

    bb5 (cleanup): {
        StorageDead(_3);
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}
