// MIR for `foo_3::{closure#0}` 0 coroutine_drop_proxy_async

fn foo_3::{closure#0}(_1: {async fn body of foo_3<T>()}, _2: &mut Context<'_>) -> Poll<()> {
    let mut _0: std::task::Poll<()>;

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Poll::<()>::Ready(const ());
        return;
    }
}
