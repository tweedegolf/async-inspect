// MIR for `foo_1::{closure#0}` 0 coroutine_drop

fn foo_1::{closure#0}(_1: *mut {async fn body of foo_1()}) -> () {
    debug _task_context => _50;
    let mut _0: ();
    let mut _2: &mut std::task::Context<'_>;
    let _3: std::string::String;
    let mut _4: std::string::String;
    let mut _5: &str;
    let _6: &str;
    let mut _9: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _10: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _12: ();
    let _13: ();
    let mut _14: std::task::Poll<i32>;
    let mut _15: std::pin::Pin<&mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>>;
    let mut _16: &mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _17: &mut std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: &mut std::task::Context<'_>;
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: &mut std::task::Context<'_>;
    let mut _25: ();
    let mut _27: {async fn body of foo_3<i32>()};
    let mut _28: {async fn body of foo_3<i32>()};
    let _30: ();
    let mut _31: std::task::Poll<i32>;
    let mut _32: std::pin::Pin<&mut {async fn body of foo_3<i32>()}>;
    let mut _33: &mut {async fn body of foo_3<i32>()};
    let mut _34: &mut {async fn body of foo_3<i32>()};
    let mut _35: &mut std::task::Context<'_>;
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: &mut std::task::Context<'_>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: &mut std::task::Context<'_>;
    let mut _42: ();
    let mut _43: i32;
    let mut _44: i32;
    let mut _45: i32;
    let mut _46: (i32, bool);
    let mut _47: i32;
    let mut _48: (i32, bool);
    let mut _49: i32;
    let mut _50: &mut std::task::Context<'_>;
    let mut _51: u32;
    scope 1 {
        debug test => (((*_1) as variant#4).0: std::string::String);
        let _7: i32;
        scope 2 {
            debug a => (((*_1) as variant#4).1: i32);
            let _8: i32;
            let mut _11: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>;
            scope 3 {
                debug b => (((*_1) as variant#4).2: i32);
                let _26: i32;
                let mut _29: {async fn body of foo_3<i32>()};
                scope 6 {
                    debug c => _26;
                }
                scope 7 {
                    debug __awaitee => (((*_1) as variant#4).3: {async fn body of foo_3<i32>()});
                    let _39: i32;
                    scope 8 {
                        debug result => _39;
                    }
                }
            }
            scope 4 {
                debug __awaitee => (((*_1) as variant#3).2: std::future::PollFn<{closure@examples/simple.rs:42:34: 42:43}>);
                let _22: i32;
                scope 5 {
                    debug result => _22;
                }
            }
        }
    }

    bb0: {
        _51 = discriminant((*_1));
        switchInt(move _51) -> [0: bb16, 3: bb19, 4: bb20, otherwise: bb21];
    }

    bb1: {
        StorageDead(_42);
        StorageDead(_41);
        drop((((*_1) as variant#4).3: {async fn body of foo_3<i32>()})) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        nop;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb7;
    }

    bb4: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb5;
    }

    bb5: {
        nop;
        goto -> bb6;
    }

    bb6: {
        StorageDead(_9);
        goto -> bb7;
    }

    bb7: {
        nop;
        nop;
        drop((((*_1) as variant#4).0: std::string::String)) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        nop;
        goto -> bb17;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        nop;
        goto -> bb12;
    }

    bb12 (cleanup): {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb13;
    }

    bb13 (cleanup): {
        nop;
        nop;
        drop((((*_1) as variant#4).0: std::string::String)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        nop;
        goto -> bb10;
    }

    bb15: {
        return;
    }

    bb16: {
        goto -> bb18;
    }

    bb17: {
        goto -> bb9;
    }

    bb18: {
        goto -> bb15;
    }

    bb19: {
        StorageLive(_9);
        StorageLive(_24);
        StorageLive(_25);
        goto -> bb4;
    }

    bb20: {
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_41);
        StorageLive(_42);
        goto -> bb1;
    }

    bb21: {
        return;
    }
}
